/*========================== begin_copyright_notice ============================

Copyright (C) 2021 Intel Corporation

SPDX-License-Identifier: MIT

============================= end_copyright_notice ===========================*/

/*========================== begin_copyright_notice ============================

Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
See https://llvm.org/LICENSE.txt for license information.
SPDX-License-Identifier: Apache-2.0 with LLVM-exception

============================= end_copyright_notice ===========================*/

diff --git a/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp b/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp
index 2fa7436213dd..c5db1f6eb876 100644
--- a/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp
+++ b/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp
@@ -1082,7 +1082,7 @@ static LoopUnrollResult tryToUnrollLoop(
     // number of loop tests goes up which may end up being worse on targets with
     // constrained branch predictor resources so is controlled by an option.)
     // In addition we only unroll small upper bounds.
-    if (!(UP.UpperBound || MaxOrZero) || MaxTripCount > UnrollMaxUpperBound) {
+    if (!(UP.UpperBound || MaxOrZero) || MaxTripCount > std::max(16U, UnrollMaxUpperBound.getValue())) {
       MaxTripCount = 0;
     }
   }
